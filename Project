-- Creating Database aircargo and connecting to it
CREATE DATABASE aircargo;
\c aircargo;

-- ===========================================
-- Creating Table: routes_details
-- ===========================================
CREATE TABLE routes_details (
  route_id INT NOT NULL,
  flight_num INT NOT NULL,
  origin_airport VARCHAR(3) NOT NULL,
  destination_airport VARCHAR(100) NOT NULL,
  aircraft_id VARCHAR(100) NOT NULL,
  distance_miles INT NOT NULL,
  PRIMARY KEY (route_id),
  CONSTRAINT Flight_number_check CHECK (SUBSTRING(CAST(flight_num AS TEXT) FROM 1 FOR 2) = '11'),
  CONSTRAINT routes_chk_1 CHECK (distance_miles > 0)
);

-- ===========================================
-- Query: Display all ticket details
-- ===========================================
SELECT * FROM ticket_details;

-- ===========================================
-- Query: Passengers on routes 
-- ===========================================
SELECT * FROM passengers_on_flights ;

-- ===========================================
-- Query: Display all passengers on flights
-- ===========================================
SELECT * FROM passengers_on_flights;

-- ===========================================
-- Query: Business class passengers and revenue
-- ===========================================
SELECT COUNT(customer_id) AS "NO. OF PASSENGERS", 
       SUM(price_per_ticket) AS REVENUE
FROM ticket_details
WHERE class_id = 'Business';

-- ===========================================
-- Query: Full name of customers
-- ===========================================
SELECT customer_id, 
       CONCAT(first_name, ' ', last_name) AS "FULL NAME", 
       date_of_birth, 
       gender
FROM customer;

-- ===========================================
-- Query: Customers who registered and booked tickets
-- ===========================================
SELECT c.customer_id, 
       CONCAT(c.first_name, ' ', c.last_name) AS Name, 
       COUNT(t.no_of_tickets) AS Total_Tickets_Booked
FROM customer c
JOIN ticket_details t ON c.customer_id = t.customer_id
GROUP BY c.customer_id, Name
ORDER BY Total_Tickets_Booked DESC;

-- ===========================================
-- Query: Customers by brand (Emirates)
-- ===========================================
SELECT c.first_name, 
       c.last_name, 
       c.customer_id
FROM customer c
JOIN ticket_details t ON c.customer_id = t.customer_id
WHERE t.brand = 'Emirates'
GROUP BY c.customer_id, c.first_name, c.last_name;

-- ===========================================
-- Query: Customers in Economy Plus class
-- ===========================================
SELECT customer_id, 
       class_id
FROM passengers_on_flights
GROUP BY customer_id, class_id
HAVING class_id = 'Economy Plus';

-- ===========================================
-- Query: Revenue status using CASE
-- ===========================================
SELECT CASE
           WHEN SUM(no_of_tickets * price_per_ticket) > 10000 THEN 'Revenue Crossed 10000'
           ELSE 'Revenue Less Than 10000'
       END AS Revenue_Status
FROM ticket_details;

-- ===========================================
-- Query: Maximum ticket price by class
-- ===========================================
SELECT DISTINCT class_id, 
       MAX(price_per_ticket) OVER (PARTITION BY class_id) AS Max_Class_Price
FROM ticket_details;



-- ===========================================
-- Query: Passengers on route ID 4
-- ===========================================
SELECT * FROM passengers_on_flights WHERE route_id = 4;

--top 10% contributed 50% of sales.

-- Step 1: Calculate total sales
WITH total_sales AS (
    SELECT SUM(price_per_ticket * no_of_tickets) AS total_revenue
    FROM ticket_details
),

-- Step 2: Rank customers by total revenue contribution
ranked_sales AS (
    SELECT customer_id,
           CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
           SUM(price_per_ticket * no_of_tickets) AS total_customer_revenue,
           RANK() OVER (ORDER BY SUM(price_per_ticket * no_of_tickets) DESC) AS revenue_rank
    FROM ticket_details t
    JOIN customer c ON t.customer_id = c.customer_id
    GROUP BY customer_id, c.first_name, c.last_name
)

-- Step 3: Identify top 10% of customers who contribute to 50% of total sales
SELECT rs.customer_id, 
       rs.customer_name,
       rs.total_customer_revenue,
       ts.total_revenue,
       (rs.total_customer_revenue * 100.0 / ts.total_revenue) AS percentage_of_total_sales
FROM ranked_sales rs
JOIN total_sales ts ON 1=1
WHERE rs.revenue_rank <= (SELECT COUNT(*) * 0.1 FROM ranked_sales)
  AND rs.total_customer_revenue >= (ts.total_revenue * 0.5);


-- Query to find the busiest route overall, with specific interest in New York to Los Angeles
SELECT rd.origin_airport,
       rd.destination_airport,
       COUNT(pf.customer_id) AS total_passengers
FROM passengers_on_flights pf
JOIN routes_details rd ON pf.route_id = rd.route_id
GROUP BY rd.origin_airport, rd.destination_airport
ORDER BY total_passengers DESC
LIMIT 1;


-- Query to find the average price of Economy Class tickets and the price of Business Class tickets
SELECT route_id,
       AVG(CASE WHEN class_id = 'Economy' THEN price_per_ticket END) AS avg_economy_price,
       MAX(CASE WHEN class_id = 'Business' THEN price_per_ticket END) AS business_class_price
FROM ticket_details
JOIN routes_details rd ON ticket_details.route_id = rd.route_id
WHERE rd.origin_airport = 'JFK' AND rd.destination_airport = 'LAX'
GROUP BY route_id;

